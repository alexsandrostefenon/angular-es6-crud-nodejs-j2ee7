package org.domain.financial2.entity;

// Generated 24/10/2014 09:14:40 by Hibernate Tools 3.4.0.CR1

import java.util.List;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.Table;

import org.domain.commom.ByteArrayUtils;

/**
 * Bin generated by hbm2java
 */
@Entity
@Table(name = "iso8583_bin")
public class ISO8583Bin implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 4748974732119649013L;
	@Id
	private Integer bin;
	private Integer range;
	private String emitter;
	private Integer provider;
	private Integer product;
	@Column(name = "pansize")
	private Integer panSize;
	@Column(name="crypttype")
	private Integer cryptType;
	private Integer flags;
	private String flows;
	
	// BIN DINAMICO
	private Integer products;
	@Column(name = "providername")
	private String providerName;
	private String questions;
	@Column(name = "sizewithoutcards")
	private Integer sizeWithOutCards;
	private Integer timeout;
	
	// FRETE
	private String flagsPosFrete;
	@Column(name="chip_questions")
	String chipQuestions;
	@Column(name="offset_year")
	Integer offsetYear;
	@Column(name="offset_month")
	Integer offsetMonth;
	@Column(name="offset_service_code")
	Integer offsetServiceCode;
	@Column(name="offset_cvv")
	Integer offsetCVV;
	@Column(name="offset_year_chip")
	Integer offsetYearChip;
	@Column(name="offset_month_chip")
	Integer offsetMonthChip;
	@Column(name="offset_service_code_chip")
	Integer offsetServiceCodeChip;
	@Column(name="offset_cvv_chip")
	Integer offsetCvvChip;
	@Column(name="service_code_chip")
	Integer serviceCodeChip;

	public ISO8583Bin() {
	}

	@Override
	public String toString() {
		return "\nbin = " + bin + "\nrange = " + range + "\nemitter = "
				+ emitter + "\nprovider = " + provider + "\nproduct = " + product
				+ "\npanSize = " + panSize + "\nflags = " + flags + "\nflows = " + flows
				+ "]";
	}

	public static ISO8583TefQuestion getQuestion(List<ISO8583TefQuestion> list, int id) {
		ISO8583TefQuestion ret = null;
		
		for (ISO8583TefQuestion item : list) {
			if (item.getId() == id) {
				ret = item;
				break;
			}
		}
		
		return ret;
	}

	public static ISO8583TefFlow getFlow(List<ISO8583TefFlow> list, int id) {
		ISO8583TefFlow ret = null;
		
		for (ISO8583TefFlow item : list) {
			if (item.getId() == id) {
				ret = item;
				break;
			}
		}
		
		return ret;
	}
	
	private static String report(EntityManager entityManager, List<ISO8583TefFlow> listFlows, List<ISO8583TefQuestion> listQuestions, int bin, String emitter, int providerId) {
		StringBuilder builder = new StringBuilder(10*1024);
		String sql;
		sql = String.format("from Bin b where b.provider = %d and b.min = %d and b.emitter = '%s'", providerId, bin, emitter);
		@SuppressWarnings("unchecked")
		List<ISO8583Bin> bins = (List<ISO8583Bin>) entityManager.createQuery(sql).getResultList();
		sql = String.format("from Provider p where p.id = %d", providerId);
		@SuppressWarnings("unchecked")
		List<ISO8583TefProvider> providers = (List<ISO8583TefProvider>) entityManager.createQuery(sql).getResultList();
		sql = String.format("from Product p where p.id in (select b.product from Bin b where b.provider = %d and b.min = %d and b.emitter = '%s')", providerId, bin, emitter);
		@SuppressWarnings("unchecked")
		List<ISO8583TefProduct> listProducts = (List<ISO8583TefProduct>) entityManager.createQuery(sql).getResultList();
		ISO8583Bin b = bins.get(0);
		
//		builder.append(String.format("\nId = %06d\n", b.id));
		builder.append(String.format("\nNome = %s\n", providers.get(0).getText()));
		builder.append(String.format("Operadora = %06d\n", b.provider));
		builder.append(String.format("bin = %06d\n", b.bin));
		builder.append(String.format("range = %06d\n", b.range));
		builder.append(String.format("Emissor = %s\n", b.emitter));
		builder.append(String.format("panSize = %06d\n", b.panSize));
		builder.append("Produtos habilitados :\n");

		
		for (int i = 0; i < bins.size() && i < listProducts.size(); i++) {
			ISO8583TefProduct product = listProducts.get(i);
			builder.append('\t');
			builder.append(product.getText());
			builder.append('\n');
			b = bins.get(i);
			int flags = b.getFlags();
			
			if ((flags & 0x00800000) != 0) {
				builder.append("\t\tPermissão para cartão digitado\n");
			}
			
			String flows = b.getFlows();
			
			if (flows != null) {
				int offsetFlows = 0;
				
				while (offsetFlows < flows.length()) {
					String strFlow = flows.substring(offsetFlows, offsetFlows+3);
					offsetFlows += 3;
					int flowId = Integer.parseInt(strFlow);
					ISO8583TefFlow flow = getFlow(listFlows, flowId);
					String questions = flow.getQuestions();
					
					if (questions != null) {
						int offsetQuestions = 0;
						
						while (offsetQuestions < questions.length()) {
							String strQuestion = questions.substring(offsetQuestions, offsetQuestions+4);
							offsetQuestions += 4;
							int questionId = Integer.parseInt(strQuestion);
							ISO8583TefQuestion question = getQuestion(listQuestions, questionId);
							builder.append("\t\t");
							
							if (question != null) {
								builder.append(question.getText());
							} else {
								builder.append("????????");
							}
							
							builder.append('\n');
						}
					}
				}
			}

			if ((flags & 0x00080000) != 0) {
				builder.append("\t\tSolicita senha\n");
			}
			
			if ((flags & 0x00004000) != 0 || (flags & 0x00002000) != 0) {
				builder.append("\t\tSolicita informar se compra é com ou sem juros\n");
			}

			if ((flags & 0x00080000) != 0) {
				builder.append("\t\tInforma modo de criptografia da senha\n");
			}
		}
		
		return builder.toString();
	}
	
	public static String report(EntityManager entityManager) {
		StringBuilder builder = new StringBuilder(10*1024);
		String sql = "select distinct min,emitter,provider from bin order by provider,min,emitter";
		@SuppressWarnings("unchecked")
		List<Object[]> listResults = entityManager.createNativeQuery(sql).getResultList();
		@SuppressWarnings("unchecked")
		List<ISO8583TefFlow> listFlows = (List<ISO8583TefFlow>) entityManager.createQuery("from Flow f").getResultList();
		@SuppressWarnings("unchecked")
		List<ISO8583TefQuestion> listQuestions = (List<ISO8583TefQuestion>) entityManager.createQuery("from Question q").getResultList();
		
		for (Object[] objects : listResults) {
			Integer bin = (Integer) objects[0];
			String emitter = objects[1].toString();
			Integer provider = (Integer) objects[2];
			builder.append(report(entityManager, listFlows, listQuestions, bin, emitter, provider));
		}
		
		return builder.toString();
	}

	public String toStringBinDinamic() {
		StringBuilder builder = new StringBuilder(10*1024);
//		builder.append(String.format("\nId = %06d\n", this.id));
		builder.append(String.format("\nNome = %s\n", this.providerName));
		builder.append(String.format("Operadora = %06d\n", this.provider));
		builder.append(String.format("Min = %06d\n", this.bin));
		builder.append(String.format("Max = %06d\n", this.bin + this.range));
		builder.append(String.format("Emissor = %s\n", this.emitter));
		builder.append(String.format("panSize = %06d\n", this.panSize));
		builder.append("Produtos habilitados :\n");
		
		String[] listProducts = {
				"CREDITO                 ",//1
				"DEBITO                  ",//2
				"CONVENIO                ",//3
				"CDC                     ",//4
				"CONSULTA CREDITO        ",//5
				"CONSULTA DEBITO         ",//6
				"CONSULTA CONVENIO       ",//7
				"CONSULTA CDC            ",//8
				"FATURA                  ",//9
				"CONSULTA FATURA         ",//10
				"Operações sem cartão    ",//11
				"ANTECIPACAO             ",//12

				"? 13 CONSULTA SALDO          ",//13
				"? 14 CONSULTA ANTECIPACAO    ",//14
				"? 15 SAQUE CREDITO           ",//15

				"? 16 PRE AUTORIZACAO         ",//16
		};
		
		String[] listQuestions = {
				"Permissão para cartão digitado",//1
				"CONSULTA SALDO",//2
				"Solicita senha para saldo",//3
				"SOLICITA ULTIMOS 4 DIGITOS",//4
				"SOLICITA CODIGO DE SEGURANCA",//5
				"SOLICITA DATA DE VALIDADE",//6
				"SOLICITA NUMERO DE PARCELAS",//7
				"Solicita informar se compra é com uso de receita médica",//8
				"Solicita senha",//9
				"SOLICITA CPF",//10
				"SOLICITA CNPJ",//11
				"SOLICITA RG",//12
				"Sorteio de pergunta",//13
				"SOLICITA DIA DO NASCIMENTO",//14
				"SOLICITA MES DO NASCIMENTO",//15
				"SOLICITA ANO DO NASCIMENTO",//16
				"SOLICITA PLANO DE COMPRA",//17
				"SOLICITA VALOR DE ENTRADA",//18
				"SOLICITA IDENTIFICACAO",//19
				"Solicita informar se compra é com ou sem juros",//20
				"Informa modo de criptografia da senha",//21
				"SOLICTA DATA DE PGTO PRIMEIRA PARCELA",//22
				"SOLICITA DDD TELEFONE",//23
				"DIGITE INFORMACAO",//24
		};
		
		int offsetQuestions = 0;
		
		for (int i = 0; i < listProducts.length && i < 16; i++) {
			int flag = 0x8000;
			flag >>= i;
			
			if ((this.products & flag) != 0) {
				builder.append('\t');
				builder.append(listProducts[i]);
				builder.append('\n');
				int questions = ByteArrayUtils.hexToInt(this.questions, offsetQuestions, 6, '0', '0');
				offsetQuestions += 6;
				
				for (int j = 0; j < listQuestions.length && j < 24; j++) {
					int flagQuestions = 0x800000;
					flagQuestions >>= j;
					
					if ((questions & flagQuestions) != 0) {
						builder.append("\t\t");
						builder.append(listQuestions[j]);
						builder.append('\n');
					}
				}
			}
		}
		
		
		return builder.toString();
	}
	
	public String getEmitter() {
		return this.emitter;
	}

	public void setEmitter(String emitter) {
		this.emitter = emitter;
	}

	public Integer getFlags() {
		return this.flags;
	}

	public void setFlags(Integer flags) {
		this.flags = flags;
	}

	public String getFlows() {
		return this.flows;
	}

	public void setFlows(String flows) {
		this.flows = flows;
	}

	public Integer getPanSize() {
		return this.panSize;
	}

	public void setPanSize(Integer panSize) {
		this.panSize = panSize;
	}

	public Integer getProduct() {
		return this.product;
	}

	public void setProduct(Integer product) {
		this.product = product;
	}

	public Integer getProvider() {
		return this.provider;
	}

	public void setProvider(Integer provider) {
		this.provider = provider;
	}

	public Integer getCryptType() {
		return cryptType;
	}

	public void setCryptType(Integer cryptType) {
		this.cryptType = cryptType;
	}

	public Integer getProducts() {
		return products;
	}

	public void setProducts(Integer products) {
		this.products = products;
	}

	public String getProviderName() {
		return providerName;
	}

	public void setProviderName(String providerName) {
		this.providerName = providerName;
	}

	public String getQuestions() {
		return questions;
	}

	public void setQuestions(String questions) {
		this.questions = questions;
	}

	public Integer getSizeWithOutCards() {
		return sizeWithOutCards;
	}

	public void setSizeWithOutCards(Integer sizeWithOutCards) {
		this.sizeWithOutCards = sizeWithOutCards;
	}

	public Integer getTimeout() {
		return timeout;
	}

	public void setTimeout(Integer timeout) {
		this.timeout = timeout;
	}

	public Integer getBin() {
		return bin;
	}

	public void setBin(Integer bin) {
		this.bin = bin;
	}

	public Integer getRange() {
		return range;
	}

	public void setRange(Integer range) {
		this.range = range;
	}

	public String getFlagsPosFrete() {
		return flagsPosFrete;
	}

	public void setFlagsPosFrete(String flagsPosFrete) {
		this.flagsPosFrete = flagsPosFrete;
	}

	public String getChipQuestions() {
		return chipQuestions;
	}

	public void setChipQuestions(String chipQuestions) {
		this.chipQuestions = chipQuestions;
	}

	public Integer getOffsetYear() {
		return offsetYear;
	}

	public void setOffsetYear(Integer offsetYear) {
		this.offsetYear = offsetYear;
	}

	public Integer getOffsetMonth() {
		return offsetMonth;
	}

	public void setOffsetMonth(Integer offsetMonth) {
		this.offsetMonth = offsetMonth;
	}

	public Integer getOffsetServiceCode() {
		return offsetServiceCode;
	}

	public void setOffsetServiceCode(Integer offsetServiceCode) {
		this.offsetServiceCode = offsetServiceCode;
	}

	public Integer getOffsetCVV() {
		return offsetCVV;
	}

	public void setOffsetCVV(Integer offsetCVV) {
		this.offsetCVV = offsetCVV;
	}

	public Integer getOffsetYearChip() {
		return offsetYearChip;
	}

	public void setOffsetYearChip(Integer offsetYearChip) {
		this.offsetYearChip = offsetYearChip;
	}

	public Integer getOffsetMonthChip() {
		return offsetMonthChip;
	}

	public void setOffsetMonthChip(Integer offsetMonthChip) {
		this.offsetMonthChip = offsetMonthChip;
	}

	public Integer getOffsetServiceCodeChip() {
		return offsetServiceCodeChip;
	}

	public void setOffsetServiceCodeChip(Integer offsetServiceCodeChip) {
		this.offsetServiceCodeChip = offsetServiceCodeChip;
	}

	public Integer getOffsetCvvChip() {
		return offsetCvvChip;
	}

	public void setOffsetCvvChip(Integer offsetCvvChip) {
		this.offsetCvvChip = offsetCvvChip;
	}

	public Integer getServiceCodeChip() {
		return serviceCodeChip;
	}

	public void setServiceCodeChip(Integer serviceCodeChip) {
		this.serviceCodeChip = serviceCodeChip;
	}
	
}
